#!/usr/bin/bash
trap ctrl_c 2
source ${HOME}/.UMBRELLA/UMBRELLA/variables
source ${UMBRELLA}/functions

COMMANDS ffmpeg ffmpeg
COMMANDS termimage termimage

[[ -z $ChatGPT ]] && { echo "You need a key to access openIA, run setApikey to get a key..";exit 1;}

HandlerError() {
  if echo "$1" | jq -e '.error' &>/dev/null; then
    echo -en "\e[1;31mE:\e[0m OpenIA is failing: $(echo $1 | jq -r '.error.type')"
    echo $1 | jq -r '.error.mesaage'
    exit 1
  fi
}

while [[ "$#" -gt 0  ]]; do
  case $1 in
    -t | --temperature)
      Temperature="$2"
      shift
      shift
      ;;
    --max-tokens)
      Tokens="$2"
      shift
      shift
      ;;
    -m | --model)
      Model="$2"
      shift
      shift
      ;;
    -s | --size)
      Size="$2"
      shift
      shift
      ;;
    -c | --chat-context)
      Contex=true
      shift
      shift
      ;;
    *)
      echo -en "\e[1;31mE:\e[0m Unknown parameter: $1\n"
      exit 1
      ;;
  esac
done

Temperature=${Temperature:-0.7}
Tokens=${Tokens:-1024}
Model=${Model:-text-davinci-003}
Size=${Size:-512x512}
Contex=${Contex:-false}
rand=$[ $RANDOM % 5 ]

theme dark
echo -en "\e[1;m${W}☣ U M B R E L L A ☣\e[0;1m  •‣ Welcomes you to the OpenIA Area of ​​ChatGPT, to exit enter 'exit' or 'quit'. \e[0m\n\n"
running=true

#crear el historial
if [ ! -f ~/.GPT_history ]; then
  touch ~/.GPT_history
  chmod a+rw ~/.GPT_history
fi

while $running; do
  echo -en "\e[1m\e[38;5;241m U M B R E L L A \e[38;5;238m▶▶▶ \e[38;5;236mGPT:\e[0m${W}\n" && read prompt
  if [ "$prompt" == "exit" ] || [ "$prompt" == "quit" ]; then
    running=false
    echo -en "\e[1m You are leaving UMBRELLA area •‣ ChatGPT...\e[0m\n"
    sleep 0.5
  elif [[ "$prompt" =~ ^image: ]]; then
    IMG=$(curl https://api.openai.com/v1/images/generations \
      -sS \
      -H 'Content-Type: application/json' \
      -H "Authorization: Bearer $ChatGPT" \
      -d '{
        "prompt": "'"${prompt#*image:}"'",
        "n": 1,
        "size": "'"$Size"'"
      }')
    HandlerError "$IMG"
    img_url=$(echo $IMG | jq -r '.data[0].url')
    echo -en "\e[1;4m\e[38;5;241mChatGPT:\e[0m Your image has been created.\n\e[1m\nLink:\e[0;4m ${img_url}\n\e[0mYou can open it in:\n"
    select OPt in termuxApp termuxGUI androidApp browser skip; do
      curl -sS $img_url -o ${TMPDIR}/tmp_img.png
      if [[ $OPt == "termuxApp" ]]; then
        ffmpeg -i ${TMPDIR}/tmp_img.png -vf scale=512:512 ${TMPDIR} /tmp_img512.png &>/dev/null
        termimage ${TMPDIR}/tmp_img512.png
      elif [[ $OPt == "termuxGUI" ]]; then
        termux-gui-view -n 15 ${TMPDIR}/tmp_img.png 2>/dev/null
      elif [[ $OPt == "androidApp" ]]; then
        termux-share ${TMPDIR}/tmp_img.png
      elif [[ $OPt == "browser" ]]; then
        termux-open-url "${img_url}"
      else
        break
      fi
    done
    rm ${TMPDIR}/*.png

  elif [[ "$prompt" == "history" ]]; then
    echo -en "\e[1;93m\n$(bat --style snip --theme 'Dracula' ~/.GPT_history)\e[0m\n"
  elif [[ "$prompt" == "models" ]]; then
    models_rspons=$(curl https://api.openai.com/v1/models \
      -sS \
      -H "Authorization: Bearer $ChatGPT")
    HandlerError "$models_rspons"
    modls_data=$(echo $models_rspons | jq -r -C '.data[] | {id, owned_by, created}')
    echo -en "\e[1;4m\e[38;5;241mChatGPT:\e[0m This is the list of valid models for OpenIA API:\n ${modls_data}"
  elif [[ "$prompt" =~ ^model: ]]; then
    models_rspons=$(curl https://api.openai.com/v1/models \
      -sS \
      -H "Authorization: Bearer $ChatGPT")
    HandlerError "$models_rspons"
    modls_data=$(echo $models_rspons | jq -r -C '.data [] | select (.id=="'"${prompt#*model:}"'")')
     echo -en "\e[1;4m\e[38;5;241mChatGPT\e[0m Complete data for models: ${prompt#*model:}\n ${modls_data}"
  else
    escaped_prompt=$(echo "$prompt" | sed 's/"/\\"/g')
    request_prompt=${escaped_prompt//$'\n'/' '}

    if [ "$Contex" = true ]; then
      if [ -z "$chat_txt" ]; then
        chat_txt="$chat_init_prompt\nQ: $escaped_prompt"
      else
        chat_txt="$chat_txt\nQ: $escaped_prompt"
      fi
      request_prompt="${chat_txt//$'\n'/\\n}"
    fi

    rsponse=$(curl https://api.openai.com/v1/completions \
      -sS \
      -H 'Content-Type: application/json' \
      -H "Authorization: Bearer $ChatGPT" \
      -d '{
        "model": "'"$Model"'",
        "prompt": "'"${request_prompt}"'",
        "max_tokens": '$Tokens',
        "temperature": '$Temperature'
      }')
    HandlerError $rsponse
    rsponse_data=$(echo $rsponse | jq -r '.choices[].text' | sed '1,2d; s/^A://g')
    echo -en "\e[1m\e[38;5;241m ChatGPT \e[38;5;238m▶▶▶\e[0m\n"
    echo -en "\e[36m${rsponse_data}\e[0m\n"|bat --style snip -f --theme 'Visual Studio Dark+'

    if [ "$Contex" = true ]; then
      chat_txt="$chat_txt${chat_txt:+\n}\nA: ${rsponse_data//$'\n'/\\n}"
      while (( $(echo "$chat_txt" | wc -c)*1,3 > (Tokens-100) )); do
        chat_txt=$(echo "$chat_txt" | sed -n '/Q:/,$p' | tail -n +2)
        chat_txt="$chat_init_prompt $chat_txt"
      done
    fi

    time_history=$(date +"%d/%m/%Y %H/%M")
    echo -e "$time_history $prompt \n$rsponse_data \n" >>~/.GPT_history
  fi
done
